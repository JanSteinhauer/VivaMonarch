#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root" (
    customData = {
        float3 rotationEulerHint = (0, 0, 0)
    }
)
{
    reorder nameChildren = ["Group", "AmericaButterflyTimeline", "AmericaButterflyTimelineLoop", "Material", "SkyDome", "Yellow", "DirectionalLight"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (-1.0454359, 0, 0.007233739)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Xform "Group" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0.33161253, 0)
        }
    )
    {
        quatf xformOp:orient = (0.98628557, 0, 0.16504759, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.6007688, 0.83372355, -1.2575523)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "GridMaterial" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
            references = @Materials/GridMaterial.usda@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "America" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0.2617994, 0)
            }
            references = @America.usdz@
        )
        {
            quatf xformOp:orient = (0.9914449, 0, 0.13052619, 0)
            float3 xformOp:scale = (0.0029999996, 0.0029999996, 0.0029999996)
            float3 xformOp:translate = (0, 0.544676, -0.029346943)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = </Root/Group/America/OnAddedToScene>
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            def Preliminary_Behavior "OnAddedToScene"
            {
                rel actions = </Root/Group/America/OnAddedToScene/Action>
                uniform bool exclusive
                rel triggers = </Root/Group/America/OnAddedToScene/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Group/America>
                    token info:id = "SceneTransition"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/AmericaButterflyTimelineLoop>
                    rel animationLibraryKeyOverrideKey = </Root/Group/America/OnAddedToScene/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }
        }

        def Xform "countries" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0.2617994, 0)
            }
        )
        {
            quatf xformOp:orient = (0.9914449, 0, 0.13052619, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "canada" (
                active = true
                references = @pin.usdz@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.001, 0.001, 0.001)
                float3 xformOp:translate = (-0.10899193, 0.7487472, 0.07558577)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "us" (
                active = true
                references = @pin.usdz@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.001, 0.001, 0.001)
                float3 xformOp:translate = (0.0063000657, 0.48175728, 0.19443704)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Materials"
                {
                    over "Material_001"
                    {
                        token outputs:surface.connect = </Root/Group/countries/us/Materials/Material_001/pbr_shader.outputs:surface>
                    }
                }
            }

            def "mexico" (
                active = true
                references = @pin.usdz@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.0011936253, 0.0011936253, 0.0011936253)
                float3 xformOp:translate = (-0.03250347, 0.3245334, 0.20714284)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Materials"
                {
                    over "Material_001"
                    {
                        token outputs:surface.connect = </Root/Group/countries/mexico/Materials/Material_001/pbr_shader.outputs:surface>
                    }
                }
            }
        }

        def Xform "Group" (
            active = true
            customData = {
                float3 rotationEulerHint = (1.5707964, 0.2617994, 1.5426817e-8)
            }
        )
        {
            quatf xformOp:orient = (0.7010574, 0.7010574, 0.09229597, -0.09229595)
            float3 xformOp:scale = (0.099999964, 0.099999964, 0.099999964)
            float3 xformOp:translate = (-0.061344743, 0.69388807, 0.13443339)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Butterfly_Monarch" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 0, -0.0069397986)
                }
                references = @Butterfly_Monarch.usdz@
            )
            {
                reorder nameChildren = ["Materials", "SkinnedMeshes", "AnimationLibrary"]
                quatf xformOp:orient = (0.999994, 0, 0, -0.003469885)
                float3 xformOp:scale = (0.0010000002, 0.0010000002, 0.001)
                float3 xformOp:translate = (0.1536956, 0.042139057, -0.13230993)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "SkinnedMeshes"
                {
                    over "Sketchfab_model"
                    {
                        over "root"
                        {
                            over "GLTF_SceneRootNode"
                            {
                                over "Armature_66"
                                {
                                    over "GLTF_created_0"
                                    {
                                        over "GLTF_created_0_rootJoint"
                                        {
                                            over "skin0"
                                            {
                                                over "Object_0"
                                                {
                                                }

                                                over "Object_1"
                                                {
                                                }

                                                over "Object_2"
                                                {
                                                }

                                                over "Object_3"
                                                {
                                                }

                                                over "Object_4"
                                                {
                                                }

                                                over "Object_5"
                                                {
                                                }

                                                over "Object_6"
                                                {
                                                }

                                                over "Object_7"
                                                {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                def RealityKitComponent "AnimationLibrary"
                {
                    token info:id = "RealityKit.AnimationLibrary"

                    def RealityKitAnimationFile "default_subtree_animation"
                    {
                        uniform bool looping = 1
                        uniform string name = "default subtree animation"
                    }
                }
            }
        }

        def RealityKitComponent "ImageBasedLight"
        {
            uniform token info:id = "RealityKit.ImageBasedLight"
            float intensityExponent = 8.212104
            bool isGlobalIBL = 0
        }
    }

    def RealityKitTimeline "AmericaButterflyTimeline"
    {
        reorder nameChildren = ["Track", "Track2", "Track3", "Track3"]
        def RealityKitTrack "Track"
        {
            reorder nameChildren = ["Transform_To", "Transform_To2", "Transform_To3", "Transform_To4", "Transform_To5"]
            def RealityKitAction "Transform_To"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 2.870503521872571
                uniform token info:id = "4D0E9921-8AD4-4115-A859-01E91FF13375"
                float3 position = (1.4364444, 0.82757384, 2.0644543)
                quatf rotation = (0.999994, 0, 0, -0.003469885)
                float3 scale = (0.0010000002, 0.0010000002, 0.001)
                double startTime = 0
                rel target = </Root/Group/Group/Butterfly_Monarch>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                }
            }

            def RealityKitAction "Transform_To2"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 2.0614458513395504
                uniform token info:id = "9194AF39-F77E-4259-A2A6-6FCC20FAB83F"
                float3 position = (1.1108748, 0.8896981, 3.3440182)
                quatf rotation = (0.81905496, 0.0019907006, -0.5737045, -0.002841968)
                float3 scale = (0.0010000002, 0.0010000002, 0.001)
                double startTime = 2.870503521972571
                rel target = </Root/Group/Group/Butterfly_Monarch>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                }
            }

            def RealityKitAction "Transform_To3"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 1.4389730627885702
                uniform token info:id = "708B1194-BE92-4A19-9ECA-6743C1E99325"
                float3 position = (0.12947036, 0.9027291, 2.971865)
                quatf rotation = (0.00267189, -0.0034698735, 0.99999046, -0.000009402895)
                float3 scale = (0.0010000002, 0.0010000002, 0.001)
                double startTime = 4.931949373412122
                rel target = </Root/Group/Group/Butterfly_Monarch>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                }
            }

            def RealityKitAction "Transform_To5"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 1.4372583841149646
                uniform token info:id = "546D38B4-7BD7-44D5-81D2-F0B86588B20D"
                float3 position = (0.10398198, -0.094427116, -0.20464517)
                quatf rotation = (-0.99359685, 0.00039185848, -0.11293058, 0.0034477024)
                float3 scale = (0.0010000002, 0.0010000002, 0.001)
                double startTime = 8.532811348036498
                rel target = </Root/Group/Group/Butterfly_Monarch>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                }
            }

            def RealityKitAction "Transform_To4"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 2.1618889116358058
                uniform token info:id = "CAECBD66-C7C3-45F8-A931-E254CF1BC6D2"
                float3 position = (-0.32644942, -0.062368397, -0.1965542)
                quatf rotation = (-0.0194645, -0.0034692276, 0.99980444, 0.00006740812)
                float3 scale = (0.0010000002, 0.0010000002, 0.001)
                double startTime = 6.370922436300692
                rel target = </Root/Group/Group/Butterfly_Monarch>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Animation"
            {
                string actionKind = "animation"
                string animation = "default subtree animation"
                int blendLayer = 500
                double duration = 3.316666603088379
                uniform token info:id = "A5A75CA9-0AF7-4689-A81B-34973C5A7D23"
                bool separateAnimatedValue = 1
                double startTime = 0
                rel target = </Root/Group/Group/Butterfly_Monarch>

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation2"
            {
                string actionKind = "animation"
                string animation = "default subtree animation"
                int blendLayer = 500
                double duration = 3.316666603088379
                uniform token info:id = "A5A75CA9-0AF7-4689-A81B-34973C5A7D23"
                bool separateAnimatedValue = 1
                double startTime = 3.316666603188379
                rel target = </Root/Group/Group/Butterfly_Monarch>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation3"
            {
                string actionKind = "animation"
                string animation = "default subtree animation"
                int blendLayer = 500
                double duration = 3.316666603088379
                uniform token info:id = "A5A75CA9-0AF7-4689-A81B-34973C5A7D23"
                bool separateAnimatedValue = 1
                double startTime = 6.640238097110869
                rel target = </Root/Group/Group/Butterfly_Monarch>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def RealityKitTimeline "AmericaButterflyTimelineLoop"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 500
                double duration = 9.970069732151462
                uniform token info:id = "921B68C3-B577-4259-87EA-E358D95D5C42"
                double loopCount = 0
                double startTime = 0
                rel timeline = </Root/AmericaButterflyTimeline>
            }
        }
    }

    def "SkyDome" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @SkyDome.usdz@
    )
    {
        rel material:binding = </Root/Yellow> (
            bindMaterialAs = "strongerThanDescendants"
        )
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        float3 xformOp:translate = (1.0454359, 0, -0.007233739)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Material "Material"
    {
        token outputs:mtlx:surface
        token outputs:realitykit:vertex
        prepend token outputs:surface.connect = </Root/Material/UsdPreviewSurface.outputs:surface>

        def Shader "UsdPreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.14106272, 0.3271916, 0.091819756) (
                colorSpace = "srgb_displayp3"
            )
            color3f inputs:emissiveColor = (0.27028093, 0.27028093, 0.27028093) (
                colorSpace = "srgb_displayp3"
            )
            token outputs:surface
        }
    }

    def Material "Yellow"
    {
        token outputs:mtlx:surface
        token outputs:realitykit:vertex
        token outputs:surface.connect = </Root/Yellow/UsdPreviewSurface.outputs:surface>
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def Shader "UsdPreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.57874745, 0.32151988, 0) (
                colorSpace = "srgb_texture"
            )
            color3f inputs:emissiveColor = (0.6679979, 0.47512126, 0.2586011) (
                colorSpace = "srgb_texture"
            )
            token outputs:surface
        }
    }

    def Xform "DirectionalLight" (
        customData = {
            float3 rotationEulerHint = (-0.065686084, 0.26179942, -2.8925284e-9)
        }
    )
    {
        quatf xformOp:orient = (0.9909102, -0.03255621, 0.1304558, 0.0042861053)
        float3 xformOp:translate = (-0.27410984, 1.5479786, -0.4479817)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "DirectionalLight"
        {
            token info:id = "RealityKit.DirectionalLight"

            def RealityKitStruct "Shadow"
            {
            }
        }
    }
}

